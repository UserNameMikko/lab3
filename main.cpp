/*Вариант 10

*Задание 1. Унарная операция
Создать объект "Дэк".Размер и значения дэка вводятся с клавиатуры пользователем. Необходимо перегрузить
следующие операторы:
-оператор ! как метод для получения дэка с отрицательными значениями;
-оператор префиксного декрементирования как метод для уменьшения значения всех элементов дэка на единицу;
-оператор префиксного инкрементирования как метод для увеличения всех элементов на 0,5;
-оператор постфиксного декрементирования как дружественную функцию для извлечения из дэка;
-оператор постфиксного инкрементирования как дружественная функция для добавления элемента(пользовательское число) в дэк.

* Задание 2. Бинарная операция
Создать класс "Целое число".Необходимо перегрузить следующие операторы:
-оператор сложения,
-оператор вычитания,
-оператор умножения,
-оператор деления
как для работы с другими экземплярами класса, так и с пользовательскими числами;
-оператор преобразования в int.
Необходимо учитывать то, что пользовательское число и объект класса могут находится и слева и справа от оператора.
На усмотрение студента остается решение какой оператор какой перегрузки требует(метод или дружественная функция)*/
#include "Deque.h"
#include "Int.h"
template<class T> struct Data{
    T value;
    T* ptr = &value;
};

int main() {
    Deque<int> deque;
    int sizeOfDeque = 0;
    int choose = 0;
    std::cout<<"input size of deque: ";
    std::cin>>sizeOfDeque;

    // fill the deque
    for(int i = 0; i < sizeOfDeque;i++) {
        Data<int> *data = new Data<int>;
        std::cout << "input a value: ";
        std::cin >> data->value;
        std::cout << "choose how do you want to fill the deque:\n1-push_front\n2-push_back\n-->";
        std::cin >> choose;
        switch (choose) {
            case 1:
                deque.push_front(data->ptr);
                break;
            case 2:
                deque.push_back(data->ptr);
                break;
            default://exception
                std::cout<<("Incorrect input")<<std::endl;
                i--;
                break;
        }
    }

    std::cout<<deque<<"\n";
    std::cout<<"negative data: -"<<deque;
    return 0;
}


